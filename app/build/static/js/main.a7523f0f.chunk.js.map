{"version":3,"sources":["CandyMachine/index.js","CountdownTimer/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","SystemProgram","opts","CandyMachine","walletAddress","useState","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","useEffect","getCandyMachineState","a","provider","getProvider","Program","fetchIdl","candyMachineProgram","idl","program","account","candyMachine","fetch","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toLocaleDateString","toLocaleTimeString","console","log","fetchHashTable","length","mint","uri","response","json","parse","find","image","prevState","connection","Connection","Provider","window","solana","hash","metadataEnabled","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","payer","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","rpc","mintNft","txn","onSignatureWithOptions","notification","context","type","result","err","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","className","currentDate","dropDate","renderDropTimer","onClick","disabled","map","src","alt","CountdownTimer","timerString","setTimerString","interval","setInterval","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","alert","error","connectWallet","onLoad","addEventListener","removeEventListener","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7523f0f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport CountdownTimer from '../CountdownTimer';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './helpers';\n\nconst {\n  metadata: { Metadata, MetadataProgram },\n} = programs;\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n\n  const [machineStats, setMachineStats] = useState(null);\n  const [mints, setMints] = useState([]);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\n\n  useEffect(() => {\n    getCandyMachineState();\n  }, []);\t\n\n  // Actions\n  const getCandyMachineState = async () => { \n\n\n\n    const provider = getProvider();\n    \n    // Get metadata about your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n  \n    // Create a program that you can call\n    const program = new Program(idl, candyMachineProgram, provider);\n  \n    // Fetch the metadata from your candy machine\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n    \n    // Parse out all our metadata and log it out\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n  \n    // We will be using this later in our UI so let's generate this now\n    const goLiveDateTimeString = `${new Date(\n      goLiveData * 1000\n    ).toLocaleDateString()} @ ${new Date(\n      goLiveData * 1000\n    ).toLocaleTimeString()}`;\n  \n    setMachineStats({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n    \n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n  \n    setIsLoadingMints(true);\n\n    const data = await fetchHashTable(\n      process.env.REACT_APP_CANDY_MACHINE_ID,\n      true\n    );\n    \n    if (data.length !== 0) {\n      for (const mint of data) {\n        // Get URI\n        const response = await fetch(mint.data.uri);\n        const parse = await response.json();\n        console.log(\"Past Minted NFT\", mint)\n    \n        // Get image URI\n        if (!mints.find((mint) => mint === parse.image)) {\n          setMints((prevState) => [...prevState, parse.image]);\n        }\n      }\n    }\n\n    setIsLoadingMints(false);\n\n  };\n\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n    \n    // Create a new Solana provider object\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n  \n    return provider;\n  };\n\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(\n      process.env.REACT_APP_SOLANA_RPC_HOST\n    );\n\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\n      connection,\n      {\n        filters: [\n          {\n            memcmp: {\n              offset:\n                1 +\n                32 +\n                32 +\n                4 +\n                MAX_NAME_LENGTH +\n                4 +\n                MAX_URI_LENGTH +\n                4 +\n                MAX_SYMBOL_LENGTH +\n                2 +\n                1 +\n                4 +\n                0 * MAX_CREATOR_LEN,\n              bytes: hash,\n            },\n          },\n        ],\n      }\n    );\n\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);\n      else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (\n      await web3.PublicKey.findProgramAddress(\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      setIsMinting(true);\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(\n        walletAddress.publicKey,\n        mint.publicKey\n      );\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n      };\n\n      const signers = [mint];\n      const instructions = [\n        web3.SystemProgram.createAccount({\n          fromPubkey: walletAddress.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: rent,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          walletAddress.publicKey,\n          walletAddress.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          walletAddress.publicKey,\n          walletAddress.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          walletAddress.publicKey,\n          [],\n          1\n        ),\n      ];\n\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions,\n      });\n\n      console.log('txn:', txn);\n\n      // Setup listener\n      connection.onSignatureWithOptions(\n        txn,\n        async (notification, context) => {\n          if (notification.type === 'status') {\n            console.log('Receievd status event');\n\n            const { result } = notification;\n            if (!result.err) {\n              console.log('NFT Minted!');\n              setIsMinting(false);\n              await getCandyMachineState();\n            }\n          }\n        },\n        { commitment: 'processed' }\n      );\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      \n      setIsMinting(false);\n\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const renderMintedItems = () => (\n    <div className=\"gif-container\">\n      <p className=\"sub-text\">Minted Items ✨</p>\n      <div className=\"gif-grid\">\n        {mints.map((mint) => (\n          <div className=\"gif-item\" key={mint}>\n            <img src={mint} alt={`Minted NFT ${mint}`} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  // Create render function\nconst renderDropTimer = () => {\n  // Get the current date and dropDate in a JavaScript Date object\n  const currentDate = new Date();\n  const dropDate = new Date(machineStats.goLiveData * 1000);\n\n  // If currentDate is before dropDate, render our Countdown component\n  if (currentDate < dropDate) {\n    console.log('Before drop date!');\n    // Don't forget to pass over your dropDate!\n    return <CountdownTimer dropDate={dropDate} />;\n  }\n\n  // Else let's just return the current drop date\n  return <p>{`Drop Date: ${machineStats.goLiveDateTimeString}`}</p>;\n};\n\n  return (\n    // Only show this if machineStats is available\n    machineStats && (\n      <div className=\"machine-container\">\n        {renderDropTimer()}\n        <p>{`Drop Date: ${machineStats.goLiveDateTimeString}`}</p>\n        <p>{`Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`}</p>\n        \n        {machineStats.itemsRedeemed === machineStats.itemsAvailable ? (\n          <p className=\"sub-text\">Sold Out 🙊</p>\n        ) : (\n          <button className=\"cta-button mint-button\" onClick={mintToken} disabled={isMinting}>\n              Mint NFT\n          </button>\n        )}\n        {isLoadingMints && <p>LOADING MINTS...</p>}\n        {mints.length > 0 && renderMintedItems()}\n      </div>\n    )\n  );\n\n};\n\nexport default CandyMachine;\n","import React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\n\nconst CountdownTimer = ({ dropDate }) => {\n  // State\n  const [timerString, setTimerString] = useState('');\n\n    // Our useEffect will run on component load\n    useEffect(() => {\n        console.log('Setting interval...');\n    \n        // Use setInterval to run this piece of code every second\n        const interval = setInterval(() => {\n        const currentDate = new Date().getTime();\n        const distance = dropDate - currentDate;\n    \n        // Here it's as easy as doing some time math to get the different properties\n        const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n        const hours = Math.floor(\n            (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n        );\n        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n    \n        // We have our desired output, set it in state!\n        setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n    \n        // If our distance passes zero this means that it's drop time!\n        if (distance < 0) {\n            console.log('Clearing interval...');\n            clearInterval(interval);\n        }\n        }, 1000);\n    \n        // Anytime our component unmounts let's clean up our interval\n        return () => {\n            if (interval) {\n                clearInterval(interval);\n            }\n        };\n    }, []);\n\n  return (\n    <div className=\"timer-container\">\n      <p className=\"timer-header\">Candy Drop Starting In</p>\n      {timerString && <p className=\"timer-value\">{`⏰ ${timerString}`}</p>}\n    </div>\n  );\n};\n\nexport default CountdownTimer;","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  /*\n  * Declare your function\n  */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🍭 Candy Drop</p>\n          <p className=\"sub-text\">NFT drop machine with fair mint</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\n\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}